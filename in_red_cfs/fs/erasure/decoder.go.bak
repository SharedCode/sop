// The decoder reverses the process done by "encoder.go"
package erasure

import (
	"flag"
	"fmt"
	"os"

	"github.com/klauspost/reedsolomon"
)

// DecodeResult is a structure containing the Decode function result.
type DecodeResult struct {
	DecodedData []byte
	// In case shard(s) are nil or corrupted but can get reconstructed then this array
	// hold the shard(s) indeces that were nil or corrupted and had to be reconstructed.
	// Useful for fixing the nil or corrupted shards, e.g. - save or overwrite them.
	ReconstructedShardsIndeces []int
	Error error
}

// Decode will reverse the erasure encode done on shards and returns the data together
// with other useful details like indices of detected corrupted shards but are able to 
// reconstruct using "erasure encoding" or error if there is an error encountered.
func (e * erasure)Decode(shards [][]byte) *DecodeResult {
	// Create matrix
	enc, err := reedsolomon.New(e.dataShardsCount, e.parityShardsCount)
	if err != nil {
		return &DecodeResult{
			Error: err,
		}
	}

	// Create shards and load the data.
	shards := make([][]byte, *dataShards+*parShards)
	for i := range shards {
		infn := fmt.Sprintf("%s.%d", fname, i)
		fmt.Println("Opening", infn)
		shards[i], err = os.ReadFile(infn)
		if err != nil {
			fmt.Println("Error reading file", err)
			shards[i] = nil
		}
	}

	// Verify the shards
	ok, err := enc.Verify(shards)
	if ok {
		fmt.Println("No reconstruction needed")
	} else {
		fmt.Println("Verification failed. Reconstructing data")
		err = enc.Reconstruct(shards)
		if err != nil {
			fmt.Println("Reconstruct failed -", err)
			os.Exit(1)
		}
		ok, err = enc.Verify(shards)
		if !ok {
			fmt.Println("Verification failed after reconstruction, data likely corrupted.")
			os.Exit(1)
		}
		checkErr(err)
	}

	// Join the shards and write them
	outfn := *outFile
	if outfn == "" {
		outfn = fname
	}

	fmt.Println("Writing data to", outfn)
	f, err := os.Create(outfn)
	checkErr(err)

	// We don't know the exact filesize.
	err = enc.Join(f, shards, len(shards[0])**dataShards)
	checkErr(err)
}
