{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "basePath": "/api/v1",
    "paths": {
        "/stores": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetStores responds with the list of all stores as JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stores"
                ],
                "summary": "GetStores returns list of stores",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/stores/{name}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetStoreByName responds with the details of the matching store as JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stores"
                ],
                "summary": "GetStoreByName returns details of a store having its name matching the name parameter.",
                "parameters": [
                    {
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of store to fetch",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sop.StoreInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "sop.StoreCacheConfig": {
            "type": "object",
            "properties": {
                "is_node_cache_ttl": {
                    "description": "Is NodeCache sliding time(TTL) or not. If true, needs Redis 6.2.0+.",
                    "type": "boolean"
                },
                "is_registry_cache_ttl": {
                    "description": "Is RegistryCache sliding time(TTL) or not. If true, needs Redis 6.2.0+.",
                    "type": "boolean"
                },
                "is_store_info_cache_ttl": {
                    "description": "Is StoreInfoCache sliding time(TTL) or not. If true, needs Redis 6.2.0+.",
                    "type": "boolean"
                },
                "is_value_data_cache_ttl": {
                    "description": "Is ValueCache sliding time(TTL) or not. If true, needs Redis 6.2.0+.",
                    "type": "boolean"
                },
                "node_cache_duration": {
                    "description": "Specifies this store's Node's Redis cache duration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "registry_cache_duration": {
                    "description": "Specifies this store's Registry Objects' Redis cache duration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "store_info_cache_duration": {
                    "description": "Specifies this store's details(StoreInfo) Redis cache duration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "value_data_cache_duration": {
                    "description": "Only used if IsValueDataInNodeSegment(false) \u0026 IsValueDataGloballyCached(true).\nSpecifies this store's Item Value part Redis cache duration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                }
            }
        },
        "sop.StoreInfo": {
            "type": "object",
            "properties": {
                "blob_table": {
                    "description": "Blob table name if using a table or (base) file path if storing blobs in File System.",
                    "type": "string",
                    "maxLength": 300,
                    "minLength": 1
                },
                "cache_config": {
                    "description": "Redis cache specification for this store's objects(registry, nodes, item value part).\nDefaults to the global specification and can be overriden for each store.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sop.StoreCacheConfig"
                        }
                    ]
                },
                "count": {
                    "description": "Total count of items stored.",
                    "type": "integer"
                },
                "description": {
                    "description": "(optional) Description of the Store.",
                    "type": "string",
                    "maxLength": 250
                },
                "is_unique": {
                    "description": "IsUnique tells whether key/value pair (items) of this tree should be unique on key.",
                    "type": "boolean"
                },
                "is_value_data_actively_persisted": {
                    "description": "If true, each Btree Add(..) method call will persist the item value's data to another partition, then on commit,\nit will then be a very quick action as item(s) values' data were already saved on backend.\nThis rquires 'IsValueDataInNodeSegment' field to be set to false to work.",
                    "type": "boolean"
                },
                "is_value_data_globally_cached": {
                    "description": "If true, the Value data will be cached in Redis, otherwise not. This is used when 'IsValueDataInNodeSegment'\nis set to false. Typically set to false if 'IsValueDataActivelyPersisted' is true, as value data is expected\nto be huge rendering caching it in Redis to affect Redis performance due to the drastic size of data per item.",
                    "type": "boolean"
                },
                "is_value_data_in_node_segment": {
                    "description": "IsValueDataInNodeSegment is true if \"Value\" data is stored in the B-Tree node's data segment.\nOtherwise is false.",
                    "type": "boolean"
                },
                "leaf_load_balancing": {
                    "description": "If true, node load will be balanced by pushing items to sibling nodes if there are vacant slots,\notherwise will not. This feature can be turned off if backend is impacted by the \"balancing\" act.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Short name of this (B-Tree store).",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 1
                },
                "registry_table": {
                    "description": "Virtual ID registry table name.",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 1
                },
                "root_node_id": {
                    "description": "RootNodeID is the root node's ID.",
                    "type": "string"
                },
                "slot_length": {
                    "description": "Count of items that can be stored on a given node.",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Add or update timestamp in milliseconds.",
                    "type": "integer"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}