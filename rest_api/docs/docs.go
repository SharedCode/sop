// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/jobruns": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetLatestJobRuns responds with the list of all jobs' latest job runs as JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JobRuns"
                ],
                "summary": "GetLatestJobRuns returns latest job runs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/jobs.JobRun"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/jobruns/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetJobRun locates the job run with a given job run ID then return it as JSON response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JobRuns"
                ],
                "summary": "GetJobRun returns job run details",
                "parameters": [
                    {
                        "maxLength": 60,
                        "minLength": 1,
                        "type": "string",
                        "description": "ID of job run to fetch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.JobRun"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "DeleteJobRun deletes a job run with a given job run ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JobRuns"
                ],
                "summary": "DeleteJobRun deletes job run with ID",
                "parameters": [
                    {
                        "maxLength": 60,
                        "minLength": 1,
                        "type": "string",
                        "description": "ID of job run to fetch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "CancelJobRun should find a job run from store given its job run ID, then trigger cancel of that job run if not yet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JobRuns"
                ],
                "summary": "CancelJobRun cancels a job run",
                "parameters": [
                    {
                        "maxLength": 60,
                        "minLength": 1,
                        "type": "string",
                        "description": "ID of job run to cancel",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.JobRun"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/jobruns/{name}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "StartJobRun should find a job from store given its name, then start or trigger a job run for this job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JobRuns"
                ],
                "summary": "StartJobRun starts a job run",
                "parameters": [
                    {
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of job to run",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetJobs responds with the list of all jobs as JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "GetJobs returns list of jobs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/jobs.Job"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "PostJob adds a job from JSON received in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "PostJob adds a job",
                "parameters": [
                    {
                        "description": "Job Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jobs.Job"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/jobs.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/jobs/{name}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetJobByName locates the job whose Name value matches the name parameter sent by the client, then returns that job as a response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "GetJobsByName returns job with a given name",
                "parameters": [
                    {
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of job to fetch",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.Job"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "DeleteJobByName locates the job whose Name value matches the name parameter sent by the client, then deletes that job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "DeleteJobByName deletes job with a given name",
                "parameters": [
                    {
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of job to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pipelineruns": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetLatestPipelineRuns responds with the list of all pipelines' latest runs as JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PipelineRuns"
                ],
                "summary": "GetLatestPipelineRuns returns latest pipeline runs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/jobs.PipelineRun"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pipelineruns/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetPipelineRun locates the pipeline run with a given pipeline run ID then return it as JSON response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PipelineRuns"
                ],
                "summary": "GetPipelineRun gets a pipeline run",
                "parameters": [
                    {
                        "maxLength": 60,
                        "minLength": 1,
                        "type": "string",
                        "description": "ID of pipeline run to fetch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.PipelineRun"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "DeletePipelineRun deletes a pipeline Run with a given pipeline run ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PipelineRuns"
                ],
                "summary": "DeletePipelineRun deletes a pipeline run",
                "parameters": [
                    {
                        "maxLength": 60,
                        "minLength": 1,
                        "type": "string",
                        "description": "ID of pipeline run to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "CancelPipelineRun should find a pipeline run from store given its PipelineRun ID, then trigger cancel of that pipeline run if not yet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PipelineRuns"
                ],
                "summary": "CancelPipelineRun cancels a pipeline run",
                "parameters": [
                    {
                        "maxLength": 60,
                        "minLength": 1,
                        "type": "string",
                        "description": "ID of pipeline run to cancel",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.PipelineRun"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pipelineruns/{name}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "StartPipelineRun should find a pipeline from store given its name, then start or trigger a run for this pipeline.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PipelineRuns"
                ],
                "summary": "StartPipelineRun starts a pipeline run",
                "parameters": [
                    {
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of pipeline to run",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pipelines": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetPipelines responds with the list of all pipelines as JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipelines"
                ],
                "summary": "GetPipelines returns list of pipelines",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/jobs.Pipeline"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "PostPipeline extracts pipeline details from JSON of request body then adds this as new record in pipeline repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipelines"
                ],
                "summary": "PostPipeline adds a new pipeline record in DB",
                "parameters": [
                    {
                        "description": "Pipeline Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jobs.Pipeline"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/jobs.Pipeline"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pipelines/{name}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetPipelineByName locates the job whose Name value matches the name parameter sent by the client, then returns that pipeline as a response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipelines"
                ],
                "summary": "GetPipelineByName returns pipeline with a given name",
                "parameters": [
                    {
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of job to fetch",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.Pipeline"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "DeletePipelineByName locates the job whose Name value matches the name parameter sent by the client, then deletes that pipeline.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipelines"
                ],
                "summary": "DeletePipelineByName deletes the pipeline with a given name",
                "parameters": [
                    {
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of pipeline to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "jobs.Job": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 256
                },
                "id_of_code_to_run": {
                    "description": "TODO: define Job schedule if we want to support scheduling running of jobs.",
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 1
                },
                "name": {
                    "description": "Short name of the Job, needs to be unique.",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                },
                "parameters": {
                    "description": "TODO: finalize Job parameters data types.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "run_as": {
                    "type": "string",
                    "maxLength": 25
                },
                "timeout_seconds": {
                    "description": "If -1 means no timeout, 0 means instantly timeout, \u003e 0 means timeout that amount in seconds.",
                    "type": "integer",
                    "minimum": -1
                }
            }
        },
        "jobs.JobRun": {
            "type": "object",
            "properties": {
                "end_date_time": {
                    "description": "Job run end time.",
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 1
                },
                "input": {
                    "description": "Input data as passed in by the \"code runner\".",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "job_name": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                },
                "language_runtime": {
                    "description": "Should say either Java or Python. System can extract this from when it finds the code artifact to run,\nIDofCodeToRun should specify an ID of a \"code deployment\" with details about language runtime.",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                },
                "output": {
                    "description": "Output data as returned by the job code that got ran and persisted by the \"code runner\".",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "start_date_time": {
                    "description": "Job run start time.",
                    "type": "string"
                },
                "status": {
                    "description": "Status can be one of: succeeded, failed, running, cancelled, timedout, etc...",
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 1
                }
            }
        },
        "jobs.Pipeline": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 256
                },
                "flow_state": {
                    "description": "FlowState true means \"code runner\" will check output of a job and make that as input\nto the next job in line. Otherwise will not. Asynchronous is recommended to be set to\nfalse of PipelineJob where this data flow needs to occur.",
                    "type": "boolean"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/jobs.PipelineJob"
                    }
                },
                "name": {
                    "description": "Short name of the Pipeline, needs to be unique.",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                },
                "pin_run_to_single_host": {
                    "type": "boolean"
                }
            }
        },
        "jobs.PipelineJob": {
            "type": "object",
            "properties": {
                "asynchronous": {
                    "description": "If true then code runner can run the Job or Pipeline asynchronously, meaning, concurrently\nwith other unit(s). Code runner takes care of doing \"wait for completion\" for the entire Pipeline.",
                    "type": "boolean"
                },
                "is_job": {
                    "description": "If true, then this Name pertains to a Job, otherwise to a Pipeline.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of a Job or Pipeline.",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                }
            }
        },
        "jobs.PipelineJobRun": {
            "type": "object",
            "properties": {
                "asynchronous": {
                    "description": "If true then code runner can run the Job or Pipeline asynchronously, meaning, multi-threaded\nin concurrence with other unit(s). Code runner takes care of doing an \"await\" for the Pipeline.",
                    "type": "boolean"
                },
                "is_job": {
                    "description": "If true, then this Name pertains to a Job, otherwise to a Pipeline.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of a Job or Pipeline.",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                },
                "run_id": {
                    "description": "Job or Pipeline run ID.",
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 1
                }
            }
        },
        "jobs.PipelineRun": {
            "type": "object",
            "properties": {
                "end_date_time": {
                    "description": "Pipeline run end time.",
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "flowState": {
                    "description": "FlowState true means \"code runner\" will check output of a job and make that as input\nto the next job in line. Otherwise will not. Asynchronous is recommended to be set to\nfalse of PipelineJob where this data flow needs to occur.",
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 1
                },
                "job_runs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/jobs.PipelineJobRun"
                    }
                },
                "pin_run_to_single_host": {
                    "type": "boolean"
                },
                "pipeline_name": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                },
                "start_date_time": {
                    "description": "Pipeline run start time.",
                    "type": "string"
                },
                "status": {
                    "description": "Status can be one of: succeeded, failed, running, cancelled, timedout, etc...",
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 1
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
