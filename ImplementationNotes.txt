Welcome to SOP!

This is a port from c#, thus, our coding style is very modular because the goal here is to also expand to support
an Enterprise layout. Meaning, create B-Tree constructs that can optionally use out of process Caching(e.g. Redis)
& a backend Store like Cassandra or AWS S3.
Thus, an onboarding/guest engineer may find the coding style somewhat different. Yes, porting projects are not the
same as typical application development. Because the code had been written already and is just getting translated
to the new target language, and in this case, getting expanded to support a different "scheme or client/server topology"
as mentioned.

On Persistence
* Will use go generics for type system. The c# implementation uses a very rich type system. Public interfaces
  standardizes on "generics" and internal SOP constructs use a custom serializer for efficient data storage.
  In golang port, standardizing on generics in both internal & external constructs will simplify the Key/Value
  type support and resulting serialization can standardize on go's object Marshalling functions.
  go's marshaller(& protobuff) has decent object serialization, thus, no need to get overboard.
* Will standardize on protocol buffers for performant "item" or "key/value" serialization, like in the c# version,
  items are serialized to a target linked list of DataBlocks, which, in turn is what is stored in the storage system.
* Caching, we will cache the DataBlocks which is keyed off of its Id (e.g. - UUID). DataBlock(s) contain the
  serialized data of a B-Tree Node or a large object(Value).

Implementation Schedule
* V1 - B-tree in-memory with interfaces for easy plugin to a backend data storage, e.g. - S3 or Cassandra.
* V2 - Backend storage, e.g. - local file system, Cassandra or S3 bucket. NOTE: still not finalized which backend
  will be supported, thought Cassandra seems "it".
* V3 - Support for streaming persistence, e.g. - persisting a Very Large Object(VLobs) like a 2-200+GB movie.
