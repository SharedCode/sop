/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */



#line 3 "jsondb.main.go"

#include <stdio.h> // C.longlong
#include <stdlib.h> // For free

#line 1 "cgo-generated-wrapper"

#line 3 "jsondb.managebtree.go"

#include <stdlib.h> // For free

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) char* navigateBtree(long long int ctxID, int action, char* payload, char* payload2);
extern __declspec(dllexport) char* isUniqueBtree(char* payload);

/* Return type for getFromBtree */
struct getFromBtree_return {
	char* r0;
	char* r1;
};
extern __declspec(dllexport) struct getFromBtree_return getFromBtree(long long int ctxID, int action, char* payload, char* payload2);

/* Return type for getBtreeItemCount */
struct getBtreeItemCount_return {
	long long int r0;
	char* r1;
};
extern __declspec(dllexport) struct getBtreeItemCount_return getBtreeItemCount(char* payload);
extern __declspec(dllexport) long long int createContext();
extern __declspec(dllexport) void cancelContext(long long int ctxID);
extern __declspec(dllexport) void removeContext(long long int ctxID);

// Redis global connection management related.
//
extern __declspec(dllexport) char* openRedisConnection(char* host, int port, char* password);
extern __declspec(dllexport) char* closeRedisConnection();
extern __declspec(dllexport) char* manageTransaction(long long int ctxID, int action, char* payload);
extern __declspec(dllexport) void freeString(char* cString);
extern __declspec(dllexport) char* manageBtree(long long int ctxID, int action, char* payload, char* payload2);

#ifdef __cplusplus
}
#endif
