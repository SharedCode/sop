# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master"]
  pull_request:
    branches: [ "master"]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod

      - name: Build
        run: go build -v ./inmemory ./inredfs

      - name: Unit tests with coverage
        run: |
          mkdir -p coverage
          # Collect coverage across the repo's packages (unit scope).
          # - Limit to btree, common, and inmemory packages as requested.
          # - Attribute coverage only to these packages for accurate per-package reporting.
          go test -timeout 600s -race -covermode=atomic \
            -coverpkg=./btree/...,./common/...,./inmemory/... \
            -coverprofile=coverage/unit_coverage.out \
            ./btree/... ./common/... ./inmemory/...

      - name: Build Docker image for integration tests
        run: docker build -t sop-integration:ci .

      - name: Run integration tests in Docker (produces coverage)
        run: |
          mkdir -p coverage
          docker run --rm -v "${{ github.workspace }}/coverage":/coverage sop-integration:ci

      - name: Normalize integration coverage paths
        run: |
          # Map /app/ paths from inside the container to repo-relative paths for Codecov
          sed -i 's#^/app/##' coverage/integration_coverage.out || true
          # Also normalize GitHub workspace absolute path if present
          sed -i 's#^/github/workspace/##' coverage/integration_coverage.out || true
          head -n 5 coverage/integration_coverage.out || true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: |
            coverage/unit_coverage.out
            coverage/integration_coverage.out
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}